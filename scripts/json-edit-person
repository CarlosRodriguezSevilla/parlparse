#!/usr/bin/env python

import argparse
import json
import os
import sys
import tempfile
from popolo import Popolo
from popolo.menu import Menu


def edit_file(edit_data):
    fp = tempfile.NamedTemporaryFile(delete=False)
    json.dump(edit_data, fp, sort_keys=True, indent=2)
    fp.close()
    try:
        while True:
            os.system('vim "%s"' % fp.name)
            with open(fp.name) as f:
                try:
                    new_edit_data = json.load(f)
                    break
                except ValueError as e:
                    print "Bad JSON: %s" % e
                    raw_input("Press Enter to continue...")
    finally:
        os.remove(fp.name)
    return new_edit_data


parser = argparse.ArgumentParser()
parser.add_argument('--name')
parser.add_argument('--id')
ARGS = parser.parse_args()

data = Popolo()

if ARGS.id:
    person = data.get_person(id=ARGS.id)
elif ARGS.name:
    person = data.get_person(name=ARGS.name)
    if len(person) > 1:
        opts = []
        for p in person:
            mships = sorted(data.memberships.of_person(p['id']), key=lambda x: x.get('end_date', '9999-12-31'), reverse=True)
            if len(mships):
                m = mships[0]
                mship = '%s, %s-%s' % (m['id'], m['start_date'], m.get('end_date', ''))
            else:
                mship = ''
            opts.append('%s (%s)' % (p['id'], mship))
        menu = Menu(opts)
        choice = menu.pick()
        if choice is None:
            raise Exception('Did not pick a person')
        person = [person[choice]]
    elif len(person) != 1:
        raise Exception('Did not get one person: %s' % person)
    person = person[0]
else:
    raise Exception('Must specify ID or name')

mships = data.memberships.of_person(person['id'])

edit_data = {
    '_max_ids': {
        'lord': data.max_lord_id(),
        'mp': data.max_mp_id(),
        'msp': data.max_msp_id(),
        'mla': data.max_mla_id(),
    },
    'person': person,
    'memberships': list(mships),
}
new_edit_data = edit_file(edit_data)

if edit_data == new_edit_data:
    sys.exit()

data.persons[person['id']].update(new_edit_data['person'])
edit_mships = {m['id']: m for m in new_edit_data['memberships']}
for m in data.memberships:
    if m['id'] in edit_mships:
        m.update(edit_mships[m['id']])
        del edit_mships[m['id']]

for m in edit_mships.values():
    data.add_membership(m)

data.dump()
