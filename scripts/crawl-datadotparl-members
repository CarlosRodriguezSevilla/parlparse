#!/usr/bin/env python

# Grabs the latest members data from data.parliament
# (http://data.parliament.uk/membersdataplatform/memberquery.aspx) and stores as
# XML files, one per member.

import urllib2
import time
import xml.etree.ElementTree as etree

print 'Update members XML from data.parliament'

source_urls = {
  'all-current-commons': 'http://data.parliament.uk/membersdataplatform/services/mnis/members/query/house=Commons',
  # 'all-commons': 'http://data.parliament.uk/membersdataplatform/services/mnis/members/query/house*Commons',
  # 'all-lords': 'http://data.parliament.uk/membersdataplatform/services/mnis/members/query/house*Lords'
}

for source_type, parl_members_url in source_urls.items():

  # Grab the URL
  try:
    parl_members_raw = urllib2.urlopen(parl_members_url)
  except:
    print 'Unable to retrieve data from "' + parl_members_url + '".'
    exit(1)

  try:
    localFile = open('../rawdata/datadotparl/' + source_type + '.xml', 'w')
    localFile.write(parl_members_raw.read())
    localFile.close()
  except:
    print 'Unable to write data to ' + source_type + '.xml.'
    exit(1)

  # Parse the URL to an etree
  try:
    parl_members_xml = etree.parse('../rawdata/datadotparl/' + source_type + '.xml')
  except:
    print 'Data from ' + source_type + '.xml does not seem to be valid XML.'
    exit(1)

  # Extract the members
  parl_members = parl_members_xml.getroot()
  if parl_members.tag != 'Members':
    print 'Root tag is not "Members" as expected, got "' + parl_members.tag + '". Has the schema changed?'
    exit(1)

  print 'Found ' + str(len(parl_members)) + ' members from ' + source_type + '.xml.'

  for member in parl_members:

    #time.sleep(1)

    member_url = 'http://data.parliament.uk/membersdataplatform/services/mnis/members/query/id=' + member.attrib['Member_Id'] + '/FullBiog/'

    print 'Member ' + member.attrib['Member_Id'] + ': ' + member.find('DisplayAs').text

    # Grab the URL
    try:
      parl_member_raw = urllib2.urlopen(member_url)
    except:
      print 'Unable to retrieve data from "' + member_url + '".'

    try:
      localFile = open('../rawdata/datadotparl/' + member.attrib['Member_Id'] + '.xml', 'w')
      localFile.write(parl_member_raw.read())
      localFile.close()
    except:
      print 'Unable to write data to ' + member.attrib['Member_Id'] + '.xml.'

print 'Done!'
